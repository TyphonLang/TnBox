package info.iconmaster.tnbox.libs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import info.iconmaster.tnbox.model.TnBoxInstance;
import info.iconmaster.tnbox.model.TnBoxObject;
import info.iconmaster.typhon.TyphonInput;
import info.iconmaster.typhon.model.Field;
import info.iconmaster.typhon.model.Function;
import info.iconmaster.typhon.model.Parameter;
import info.iconmaster.typhon.model.TemplateArgument;
import info.iconmaster.typhon.types.TemplateType;
import info.iconmaster.typhon.types.Type;
import info.iconmaster.typhon.types.TypeRef;
import info.iconmaster.typhon.types.UserType;

/**
 * This is an instance of the concrete type used for map generated by Typhon map constants and Map's factory default constructor.
 * 
 * @author iconmaster
 *
 */
public class SystemTypeMap extends UserType {
	public static class Iterator extends UserType {
		public static class Value {
			ArrayList<TnBoxObject> list;
			int index;
			
			public Value(ArrayList<TnBoxObject> list) {
				this.list = list;
				this.index = 0;
			}
		}
		
		public TemplateType K,V;
		
		public Function FUNC_NEXT, FUNC_DONE;
		
		public Iterator(TyphonInputData tniData) {
			super(tniData.tni, "%SystemListIterator"); markAsLibrary();
			TyphonInput input = tniData.tni;
			
			// add templates
			getTemplates().add(K = new TemplateType("K", input.corePackage.TYPE_ANY, null));
			getTemplates().add(V = new TemplateType("V", input.corePackage.TYPE_ANY, null));
			
			TypeRef entryType = new TypeRef(input.corePackage.TYPE_MAP.TYPE_ENTRY, new TemplateArgument(K), new TemplateArgument(V));
			
			// add parents
			getParentTypes().add(new TypeRef(input.corePackage.TYPE_ITERATOR, new TemplateArgument(entryType)));
			
			// add method overrides
			getTypePackage().addFunction(FUNC_NEXT = new Function(tni, "next", new TemplateType[] {
					
			}, new Parameter[] {
					
			}, new TypeRef[] {
					entryType
			}));
			Function.setOverride(input.corePackage.TYPE_ITERATOR.FUNC_NEXT, FUNC_NEXT);
			
			getTypePackage().addFunction(FUNC_DONE = new Function(tni, "done", new TemplateType[] {
					
			}, new Parameter[] {
					
			}, new Type[] {
					tni.corePackage.TYPE_BOOL
			}));
			Function.setOverride(input.corePackage.TYPE_ITERATOR.FUNC_DONE, FUNC_DONE);
			
			// add TnBox implementation
			tniData.functionHandlers.put(FUNC_NEXT, (thread, tni1, thiz, args)->{
				java.util.Iterator<Entry<TnBoxObject, TnBoxObject>> it = (java.util.Iterator<Entry<TnBoxObject, TnBoxObject>>) thiz.value;
				Entry<TnBoxObject, TnBoxObject> entry = it.next();
				return Arrays.asList(new TnBoxObject(entryType, new TnBoxInstance(new HashMap<Field, TnBoxObject>() {{
					put(tni.corePackage.TYPE_MAP.TYPE_ENTRY.FIELD_KEY, entry.getKey());
					put(tni.corePackage.TYPE_MAP.TYPE_ENTRY.FIELD_VALUE, entry.getValue());
				}})));
			});
			
			tniData.functionHandlers.put(FUNC_DONE, (thread, tni1, thiz, args)->{
				java.util.Iterator<Entry<TnBoxObject, TnBoxObject>> it = (java.util.Iterator<Entry<TnBoxObject, TnBoxObject>>) thiz.value;
				return Arrays.asList(new TnBoxObject(tni.corePackage.TYPE_BOOL, !it.hasNext()));
			});
		}
	}
	
	public TemplateType K,V;
	public Iterator TYPE_ITERATOR;
	
	public Function FUNC_GET, FUNC_SET, FUNC_KEYS, FUNC_ITERATOR;
	
	public SystemTypeMap(TyphonInputData tniData) {
		super(tniData.tni, "%SystemMap"); markAsLibrary();
		TyphonInput input = tniData.tni;
		
		// add templates
		getTemplates().add(K = new TemplateType("K", input.corePackage.TYPE_ANY, null));
		getTemplates().add(V = new TemplateType("V", input.corePackage.TYPE_ANY, null));
		
		// add parents
		getParentTypes().add(new TypeRef(input.corePackage.TYPE_MAP, new TemplateArgument(K), new TemplateArgument(V)));
		
		// add subtypes
		TYPE_ITERATOR = new Iterator(tniData);
		
		// add method overrides
		getTypePackage().addFunction(FUNC_GET = new Function(tni, "get", new TemplateType[] {
				
		}, new Parameter[] {
				new Parameter(tni, "key", K, false)
		}, new Type[] {
				V
		}));
		Function.setOverride(input.corePackage.TYPE_MAP.FUNC_GET, FUNC_GET);
		
		getTypePackage().addFunction(FUNC_SET = new Function(tni, "set", new TemplateType[] {
				
		}, new Parameter[] {
				new Parameter(tni, "value", V, false),
				new Parameter(tni, "key", K, false)
		}, new Type[] {
				
		}));
		Function.setOverride(input.corePackage.TYPE_MAP.FUNC_SET, FUNC_SET);
		
		getTypePackage().addFunction(FUNC_KEYS = new Function(tni, "keys", new TemplateType[] {
				
		}, new Parameter[] {
				
		}, new TypeRef[] {
				new TypeRef(input.corePackage.TYPE_ITERABLE, new TemplateArgument(K))
		}));
		Function.setOverride(input.corePackage.TYPE_MAP.FUNC_KEYS, FUNC_KEYS);
		
		TypeRef iterType = new TypeRef(TYPE_ITERATOR, new TemplateArgument(K), new TemplateArgument(V));
		getTypePackage().addFunction(FUNC_ITERATOR = new Function(tni, "iterator", new TemplateType[] {
				
		}, new Parameter[] {
				
		}, new TypeRef[] {
				iterType
		}));
		Function.setOverride(tni.corePackage.TYPE_ITERABLE.FUNC_ITERATOR, FUNC_ITERATOR);
		
		// add TnBox implementation
		tniData.functionHandlers.put(FUNC_GET, (thread, tni1, thiz, args)->{
			Map<TnBoxObject,TnBoxObject> a = (Map<TnBoxObject,TnBoxObject>) thiz.value;
			return Arrays.asList(a.get(args.get(0)));
		});
		
		tniData.functionHandlers.put(FUNC_SET, (thread, tni1, thiz, args)->{
			Map<TnBoxObject,TnBoxObject> a = (Map<TnBoxObject,TnBoxObject>) thiz.value;
			a.put(args.get(1), args.get(0));
			return Arrays.asList();
		});
		
		tniData.functionHandlers.put(FUNC_KEYS, (thread, tni1, thiz, args)->{
			Map<TnBoxObject,TnBoxObject> a = (Map<TnBoxObject,TnBoxObject>) thiz.value;
			return Arrays.asList(new TnBoxObject(new TypeRef(tniData.TYPE_LIST, new TemplateArgument(K)), new ArrayList<>(a.keySet())));
		});
		
		tniData.functionHandlers.put(FUNC_ITERATOR, (thread, tni1, thiz, args)->{
			Map<TnBoxObject,TnBoxObject> a = (Map<TnBoxObject,TnBoxObject>) thiz.value;
			return Arrays.asList(new TnBoxObject(iterType, a.entrySet().iterator()));
		});
	}
}
